------------------------------------------SQL Project EDA-------------------------------------------------
-----------------------------------------------------------
select 
Min(order_date) as FirstOrderDate,
Max(order_date) as LastOrderDate,
DATEDIFF(YEAR, Min(order_date), Max(order_date)) as OrderDurationyears
from [gold.fact_sales]
------------------------------------------------------------------------------------------
-- find the youngest and oldest customers and average age
SELECT 
    MIN(BirthDate) AS OldestCustomer,
    MAX(BirthDate) AS YoungestCustomer,
    DATEDIFF(YEAR ,MIN(birthdate),GETDATE()) AS oldestage,
    DATEDIFF(YEAR ,MAX(birthdate),GETDATE()) AS youngestage
FROM [gold.dim_customers]
------------------------------------------------------------------------------------------
SELECT 
       SUM(sales_amount) AS TotalSales
FROM [gold.fact_sales]
------------------------------------------------------------------------------------
--find how many items were sold in total
select SUM(quantity) as TotalItemsSold
FROM [gold.fact_sales]
------------------------------------------------------------------------------------
-- find the AVG selling price of items sold
select AVG(price) as AverageSellingPrice
from [gold.fact_sales]
------------------------------------------------------------------------------------
-- find the total number of orders
select count(order_number) as TotalOrders,
       COUNT(DISTINCT order_number) as UniqueOrders
from [gold.fact_sales]
------------------------------------------------------------------------------------
-- find the total number of products 
SELECT COUNT(product_id) as TotalProducts
FROM [gold.dim_products]
------------------------------------------------------------------------------------
-- find the total number of customers
SELECT COUNT(customer_id) as TotalCustomers
FROM  [gold.dim_customers]
------------------------------------------------------------------------------------
-- find the total number of customers that had placed orders
SELECT count(distinct customer_key) as CustomersWithOrders
from [gold.fact_sales];
-------------------------------------------------------------------------------------
--generate areport that shows all key metrics fo the business
SELECT 'total sales' as measure_name, SUM(sales_amount) as measure_value
FROM [gold.fact_sales]
UNION ALL 
SELECT 'total quantity' as measure_name, SUM(quantity) as measure_value
FROM [gold.fact_sales]
UNION ALL
select 'average price' as measure_name, AVG(price) as measure_value
from [gold.fact_sales]      
UNION ALL
SELECT 'total_N_orders' as measure_name ,COUNT(Distinct order_number) as measure_value
FROM [gold.fact_sales] 
UNION ALL
SELECT 'total_products' as measure_name, COUNT(product_id) as measure_value
FROM [gold.dim_products]
union ALL
SELECT 'total_N_customers' as measure_name ,COUNT(customer_key) as measure_value
FROM [gold.dim_customers]
-----------------------------------------Magnitude Analysis-----------------------------------------------
--find total customers by countries
SELECT country , count(customer_id) AS total_N_customers
FROM [gold.dim_customers]
group by country;
------------------------------------------------------------------------------------
-- find total customers by gender
SELECT gender , COUNT(customer_id) as total_N_customers
from [gold.dim_customers]
group by gender;
------------------------------------------------------------------------------------
--find total products by category
SELECT category , COUNT(product_id) as total_N_products
from [gold.dim_products]
group by category;
------------------------------------------------------------------------------------
--what is the average costs in each category
select Category , AVG(cost) as AVGcost
FROM [gold.dim_products]
group by category;
------------------------------------------------------------------------------------
-- what is the total revenue generated by each category
SELECT p.category , SUM(s.sales_amount) as total_revenue
FROM [gold.fact_sales] s
Left JOIN [gold.dim_products] p ON p.product_key =s.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;
------------------------------------------------------------------------------------
-- what is the total revenue generated by each customer
select CONCAT(c.first_name,' ',c.last_name) AS customer_name 
       ,SUM(s.sales_amount) as total_revenue
from [gold.fact_sales] s
left join [gold.dim_customers] c
       ON c.customer_key = s.customer_key
       GROUP BY CONCAT(c.first_name,' ',c.last_name)
       ORDER BY total_revenue DESC;
------------------------------------------------------------------------------------
--what is the distribution of sold items across countries
SELECT c.country ,SUM(s.quantity) as total_items_sold
FROM [gold.fact_sales] s
LEFT JOIN [gold.dim_customers] c 
       ON c.customer_key =s.customer_key
       GROUP BY c.country
       ORDER BY total_items_sold DESC;
-----------------------------------------------Ranking Analysis---------------------------------------------------
--1- what are the top 5 products by revenue
 select top 5 p.product_name , SUM(s.sales_amount) as total_revenue
 FROM [gold.fact_sales] s
 left join [gold.dim_products] p
    ON p.product_key = s.product_key
       group by p.product_name
       ORDER BY total_revenue DESC ;
------------------------------------------------------------------------------------
-- 2- what are the worst 5 products by revenue
 select top 5 p.product_name , SUM(s.sales_amount) as total_revenue
 FROM [gold.fact_sales] s
 left join [gold.dim_products] p
    ON p.product_key = s.product_key
       group by p.product_name
       ORDER BY total_revenue ASC ;
----------------------------------------------------------------------------------------
-- 3- what are the top 5 subcategories by revenue
select top 5 p.subcategory ,SUM(s.sales_amount) as total_revenue
from [gold.fact_sales] s
left join [gold.dim_products] p
    ON p.product_key = s.product_key
    group by p.subcategory
    order by total_revenue DESC;
----------------------------------------------------------------------------------------
-- 4 what are the worst 5 subcategories by revenue
select top 5 p.subcategory ,SUM(s.sales_amount) as total_revenue
from [gold.fact_sales] s
left join [gold.dim_products] p
    ON p.product_key = s.product_key
    group by p.subcategory
    order by total_revenue ASC;
----------------------------------------------------------------------------------------
-- 6- what are the top 5 products by revenue using(window function)
SELECT * FROM (

       select p.product_name
              ,sum(sales_amount) as total_revenue,
              ROW_NUMBER() over (order by SUM(sales_amount)DESC) AS revenue_rank
       from [gold.fact_sales] s
       left join [gold.dim_products] p
              ON p.product_key = s.product_key
              group by p.product_name
  
)t 
WHERE revenue_rank <=5 ;
----------------------------------------------------------------------------------------
-- 7-what are the worst 5 products by revenue using(window function)
select * from (
select 
       p.product_name,
       SUM(sales_amount) as total_revenue,
       ROW_NUMBER() over (ORDER BY sum(sales_amount) ASC) AS revenue_rank
FROM [gold.fact_sales] s
LEFT join [gold.dim_products] p
       ON p.product_key = s.product_key
       group by p.product_name
       )t 
       where revenue_rank <= 5 ;
----------------------------------------------------------------------------------------              
--find the top 10 customers who have generated the most revenue
select top 10 
       CONCAT(c.first_name,' ',c.last_name) AS customer_name,
       SUM(s.sales_amount) as total_revenue
from [gold.fact_sales] s
left join [gold.dim_customers] c
       ON c.customer_key = s.customer_key
       GROUP BY CONCAT(c.first_name,' ',c.last_name)
       ORDER BY total_revenue DESC;
----------------------------------------------------------------------------------------
--find the 3 customers with the fewest orders
select top 3
              CONCAT(c.first_name,' ',c.last_name) AS customer_name,
       SUM(s.sales_amount) as total_revenue
from [gold.fact_sales] s
left join [gold.dim_customers] c
       ON c.customer_key = s.customer_key
       GROUP BY CONCAT(c.first_name,' ',c.last_name)
       ORDER BY total_revenue ASC;
----------------------------------------------------------------------------------------